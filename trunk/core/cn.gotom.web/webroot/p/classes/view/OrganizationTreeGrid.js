/*
 * File: classes/view/OrganizationTreeGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Gotom.view.OrganizationTreeGrid', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.OrganizationTreeGrid',

    requires: [
        'Gotom.view.OrganizationWinForm',
        'Gotom.model.OrganizationModel',
        'Gotom.store.OrganizationTreeStore'
    ],

    id: 'OrganizationTreeGrid',
    title: '组织架构管理',
    store: 'OrganizationTreeStore',
    rootVisible: false,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            viewConfig: {

            },
            columns: [
                {
                    xtype: 'treecolumn',
                    maxWidth: 200,
                    dataIndex: 'text',
                    text: '组织名称',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'code',
                    text: '组织编码'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    id: 'treeGridTBar',
                    layout: {
                        padding: 3,
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: 'btnRef',
                            iconCls: 'icon-refresh',
                            text: '刷新',
                            listeners: {
                                click: {
                                    fn: me.onBtnRefClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'btnNew',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onBtnNewClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'btnEdit',
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onBtnEditClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            id: 'btnDel',
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onBtnDelClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            listeners: {
                itemdblclick: {
                    fn: me.onTreepanelItemDblClick,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onBtnRefClick: function(button, e, eOpts) {
        window.location.reload();
    },

    onBtnNewClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
        var record = selected.items[0];
        var pid = '';
        if(!Ext.isEmpty(record))
        {
            pid = record.data.id;
        }
        this.openWinForm('',pid);
    },

    onBtnEditClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
        var record = selected.items[0];
        if(!Ext.isEmpty(record))
        {
            this.openWinForm(record.data.id,'');
        }
    },

    onBtnDelClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
        var selecteditems = selected.items;

        if (selecteditems.length == 0)
        {
            Ext.Msg.show(
            {
                title : "操作提示",
                msg : "请选择要删除的节点!",
                icon : Ext.Msg.WARNING
            });
            return;
        }
        var ids = [];
        Ext.each(selecteditems, function()
        {
            var nd = this;
            ids.push(nd.data.id);
        });
        Ext.Msg.confirm("警告", "确定要删除吗？", function(button)
        {
            if (button == "yes")
            {
                Ext.Msg.wait("正在执行......", "操作提示");
                Ext.Ajax.request(
                {
                    url : '../p/organization!remove.do',
                    method : 'POST',
                    params :
                    {
                        id : ids.join(",")
                    },
                    success : function(response, options)
                    {
                        Ext.Msg.alert("删除提示", "删除成功");
                        window.location.reload();
                    },
                    failure : function(response, options)
                    {
                        Ext.Msg.alert("删除提示", "删除失败"+response.responseText);
                    }
                });
            }
        });
    },

    onTreepanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        this.openWinForm(record.data.id,record.data.parentId);
    },

    openWinForm: function(id, parentId) {
        var winform = Ext.create('Gotom.view.OrganizationWinForm');
        winform.getForm().bindData(id,parentId);
        winform.show();
    }

});
/*
 * File: classes/view/CustomPanel.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Gotom.view.CustomPanel', {
    extend: 'Ext.panel.Panel',

    gridPanel: '',
    border: false,
    layout: {
        type: 'border'
    },

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'gridpanel',
                    region: 'west',
                    width: 250,
                    title: '客户列表',
                    columns: [
                        {
                            xtype: 'gridcolumn',
                            width: 249,
                            resizable: false,
                            sortable: false,
                            dataIndex: 'name',
                            text: '客户名称'
                        }
                    ],
                    viewConfig: {
                        listeners: {
                            itemclick: {
                                fn: me.onViewItemClick,
                                scope: me
                            }
                        }
                    },
                    listeners: {
                        afterlayout: {
                            fn: me.onGridpanelAfterLayout,
                            scope: me
                        }
                    },
                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                    })
                },
                {
                    xtype: 'panel',
                    region: 'center',
                    border: false,
                    autoScroll: true,
                    layout: {
                        type: 'border'
                    },
                    items: [
                        {
                            xtype: 'form',
                            region: 'north',
                            height: 237,
                            bodyPadding: 10,
                            title: '编辑信息',
                            items: [
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: '公司名称',
                                    labelWidth: 60,
                                    name: 'name',
                                    allowBlank: false,
                                    blankText: '必填项'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: '首页标题',
                                    labelWidth: 60,
                                    name: 'titlename',
                                    allowBlank: false,
                                    blankText: '必填项'
                                },
                                {
                                    xtype: 'textfield',
                                    anchor: '100%',
                                    fieldLabel: '标题样式',
                                    labelWidth: 60,
                                    name: 'fontStyle'
                                },
                                {
                                    xtype: 'filefield',
                                    anchor: '100%',
                                    width: 208,
                                    fieldLabel: '标题背景',
                                    labelWidth: 60,
                                    name: 'topbg'
                                },
                                {
                                    xtype: 'filefield',
                                    anchor: '100%',
                                    width: 208,
                                    fieldLabel: '公司图标',
                                    labelWidth: 60,
                                    name: 'logo'
                                },
                                {
                                    xtype: 'textareafield',
                                    anchor: '100%',
                                    height: 58,
                                    fieldLabel: '公司简介',
                                    labelWidth: 60,
                                    name: 'description'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'id'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'logoUrl'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'topbgUrl'
                                },
                                {
                                    xtype: 'hiddenfield',
                                    anchor: '100%',
                                    fieldLabel: 'Label',
                                    name: 'rightIds'
                                }
                            ],
                            listeners: {
                                afterlayout: {
                                    fn: me.onFormAfterLayout,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'panel',
                            region: 'center',
                            layout: {
                                type: 'border'
                            },
                            title: '角色可访问资源',
                            listeners: {
                                afterlayout: {
                                    fn: me.onPanelAfterLayout2,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterlayout: {
                            fn: me.onPanelAfterLayout,
                            single: true,
                            scope: me
                        }
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onAddClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onDelClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-save',
                            text: '保存',
                            listeners: {
                                click: {
                                    fn: me.onSaveClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            listeners: {
                afterlayout: {
                    fn: me.onPanelAfterLayout1,
                    single: true,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onViewItemClick: function(dataview, record, item, index, e, eOpts) {
        this.loadForm(record.data.id);
        //this.loadTree(record.data.id);
        //this.formPanel.getForm().setValues(record.data);
    },

    onGridpanelAfterLayout: function(container, layout, eOpts) {
        this.gridPanel = container;
    },

    onFormAfterLayout: function(container, layout, eOpts) {
        this.formPanel = container;
    },

    onPanelAfterLayout: function(container, layout, eOpts) {
        this.centerPanel = container;
    },

    onPanelAfterLayout2: function(container, layout, eOpts) {
        this.treePanel = container;
    },

    onAddClick: function(button, e, eOpts) {
        this.loadForm('');
    },

    onDelClick: function(button, e, eOpts) {
        var me = this;
        var selected = me.gridPanel.getSelectionModel().selected;
        var selecteditems = selected.items;
        if (selecteditems.length === 0)
        {
            Ext.Msg.show(
            {
                title : "操作提示",
                msg : "请选择要删除的节点!",
                icon : Ext.Msg.WARNING
            });
            return;
        }
        var ids = [];
        Ext.each(selecteditems, function()
        {
            var nd = this;
            ids.push(nd.data.id);
        });
        Ext.Msg.confirm("警告", "确定要删除吗？", function(button)
        {
            if (button == "yes")
            {
                Ext.Msg.wait("正在执行......", "操作提示");
                Ext.Ajax.request(
                {
                    url : ctxp+'/p/custom!remove.do',
                    method : 'POST',
                    params :
                    {
                        'custom.id' : ids.join(",")
                    },
                    success : function(response, options)
                    {
                        Ext.Msg.alert("删除提示", "删除成功");
                        me.loadGrid();
                        me.onAddClick(button,e,eOpts);
                    },
                    failure : function(response, options)
                    {
                        Ext.Msg.alert("删除提示", "删除失败<br/>"+response.responseText);
                    }
                });
            }
        });
    },

    onSaveClick: function(button, e, eOpts) {
        var me = this;
        var form = me.formPanel;
        try{
            var rightIds = [];
            var tree = me.treePanel.items.get(1);
            var items = tree.getSelectionModel().store.data.items;
            Ext.each(items, function()
            {
                var nd = this;
                if(nd.data.checked)
                {
                    rightIds.push(nd.data.id);
                }
            });    
            form.getForm().findField('rightIds').setValue(rightIds);
            Common.formSubmit({  
                url : ctxp+'/p/customSave.do',
                form:form,
                callback : function(result)
                {
                    if(result.success)
                    {
                        me.loadGrid();
                        me.onAddClick(button,e,eOpts);
                    }else{
                        Ext.Msg.alert('信息提示', result.data);
                    }	
                }
            });
        }catch(error){
            alert(error);
        }
    },

    onPanelAfterLayout1: function(container, layout, eOpts) {
        this.loadGrid();
        this.loadTree('');
        this.loadForm('');
    },

    loadGrid: function() {
        var me = this;
        Common.ajax({
            component : me,
            message : '正在加载......',    
            url : ctxp+'/p/custom!list.do',
            callback : function(result) {
                var myStore = Ext.create('Ext.data.Store', {
                    storeId:'roleStore',
                    fields: [
                    {
                        name: 'id'
                    },
                    {
                        name: 'name'
                    },
                    {
                        name: 'description'
                    }
                    ],
                    data : result.data,
                    proxy:
                    {
                        type: 'memory',
                        reader:{
                            type: 'json'
                        }
                    }
                });
                me.gridPanel.bindStore(myStore); 
            }
        });
    },

    loadForm: function(customId) {
        var me = this;
        me.formPanel.getForm().reset();
        Common.ajax({
            component : me,
            message : '正在加载......',    
            url : ctxp+'/p/custom.do?custom.id='+customId,
            callback : function(result) {
                me.loadTree(result.data.id);
                me.formPanel.getForm().setValues(result.data);
            }
        });
    },

    loadTree: function(customId) {
        var me = this;
        Common.ajax({
            component : me,
            message : '正在加载......',    
            url : ctxp+'/p/custom!tree.do?custom.id='+customId,
            callback : function(result) {
                var myStore = Ext.create('Ext.data.TreeStore', {
                    defaultRootId : '',
                    clearOnLoad : true,
                    nodeParam : '',    
                    fields: [
                    {
                        name: 'id'
                    },
                    {
                        name: 'parentId'
                    },
                    {
                        name: 'text'
                    },
                    {
                        name: 'component'
                    },
                    {
                        name: 'resource'
                    },
                    {
                        name: 'iconCls'
                    },
                    {
                        name: 'checked',
                        type: 'boolean'
                    }
                    ],
                    proxy:
                    {
                        type: 'memory',
                        data: result.data,
                        reader:{
                            type: 'json'
                        }
                    }
                });
                me.bindTreeStore(me,myStore);
            }
        });
    },

    bindTreeStore: function(me, treeStore) {
        var tree = Ext.create('Ext.tree.Panel',
            {
                region: 'center',
                //title: '角色可访问资源',
                animate : true,
                border : false,
                bodyborder : false,
                lines : true,
                split : true,
                stateful : true,
                collapsible : false,
                frame : false,
                enableDD : true,
                autoScroll : true,
                autoHeight : false,
                rootVisible : false,
                multiSelect : false,
                store:treeStore,
                root :
                {
                    expanded : true
                },
                listeners: {
                    itemclick: 
                    {
                        fn: me.onTreeItemClick,
                        scope: me
                    },
                    checkchange: 
                    {
                        fn: Common.onTreePanelCheckChange,
                        scope: me
                    }
                },        
                columns : [
                {
                    xtype : 'treecolumn',
                    dataIndex : 'text',
                    text : '菜单名称',
                    sortable : false,
                    flex : 1,
                    width:300,
                    menuDisabled : true
                },
                {
                    xtype : 'gridcolumn',
                    dataIndex : 'iconCls',
                    text : '使用样式'
                },
                {
                    xtype : 'gridcolumn',
                    dataIndex : 'component',
                    width:200,
                    text : '控件或连接'
                },
                {
                    xtype : 'gridcolumn',
                    dataIndex : 'resource',
                    width:200,
                    text : '数据资源'
                }]
            });
        //tree.expandAll();
        me.treePanel.remove(1);
        me.treePanel.add(tree);
    },

    onTreeItemClick: function(dataview, record, item, index, e, eOpts) {
        if(record.data.checked)
        {
            record.set('checked', false);
            Common.onTreePanelCheckChange(record,false,eOpts);
        }
        else
        {
            record.set('checked', true);
            Common.onTreePanelCheckChange(record,true,eOpts);
        }
    }

});